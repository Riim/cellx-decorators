import { ICellOptions } from 'cellx';
export declare function Reactive<TValue = any>(target: object, propName: string, propDesc?: PropertyDescriptor): any;
export declare function Reactive<TValue = any, TContext = any, TMeta = any>(options: ICellOptions<TValue, TContext, TMeta>): (target: object, propName: string, propDesc?: PropertyDescriptor) => any;
export { Reactive as reactive };
export declare function Observable<TValue = any>(target: object, propName: string, propDesc?: PropertyDescriptor): any;
export declare function Observable<TValue = any, TContext = any, TMeta = any>(options: ICellOptions<TValue, TContext, TMeta>): (target: object, propName: string, propDesc?: PropertyDescriptor) => any;
export { Observable as observable };
export declare function Computed<TValue = any>(target: object, propName: string, propDesc?: PropertyDescriptor): any;
export declare function Computed<TValue = any, TContext = any, TMeta = any>(options: ICellOptions<TValue, TContext, TMeta>): (target: object, propName: string, propDesc?: PropertyDescriptor) => any;
export { Computed as computed };
